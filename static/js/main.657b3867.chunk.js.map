{"version":3,"sources":["components/formInput.tsx","components/invoiceError.tsx","components/formLineItem.tsx","utilities/formLineItem.tsx","components/formSubmit.tsx","components/invoiceAlert.tsx","components/invoiceList.tsx","components/invoiceContainer.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["FormInput","props","className","htmlFor","name","toLowerCase","id","onChange","e","handleChange","target","value","type","InvoiceError","errors","numberOfItems","length","role","map","error","idx","key","Object","values","onClick","hideErrors","xmlns","viewBox","d","FormLineItem","useState","description","setDescription","cost","setCost","quantity","setQuantity","setErrors","handleAddItem","push","validateLineItem","price","Number","calculatePrice","newItem","buildLineItem","addToItems","desc","FormSubmit","total","toFixed","submitInvoice","InvoiceAlert","items","hideInvoiceSummary","InvoiceList","lineItems","item","Invoice","setLineItems","getTotal","reduce","acc","invoiceTotal","setInvoiceTotal","useEffect","invoiceSubmitted","setInvoiceSubmitted","invoice","console","log","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.657b3867.chunk.js","sourcesContent":["import React from 'react';\nimport '../styles/invoice-tailwind.css';\n\nconst FormInput = (props:any) => {\n  return (\n    <div className='text-left width-full flex flex-col'>\n      <label className='form-label font-bold' htmlFor={props.name.toLowerCase()}>{props.name}</label>\n      <input\n        className='flex-1 border border-black px-2 py-1'\n        id={props.name.toLowerCase()}\n        name={props.name.toLowerCase()}\n        onChange={(e) => props.handleChange(e.target.value)}\n        type={props.type}\n        value={props.value}\n      />\n    </div>\n  )\n}\n\nexport default FormInput;","import React from 'react';\n\nconst InvoiceError = (props:any) => {\n  const { errors } = props;\n  const numberOfItems = errors.length;\n  return (\n    <div className=\"bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative\" role=\"alert\">\n      <p className=\"font-bold\">{numberOfItems} {numberOfItems === 1 ? 'Error' : 'Errors'}</p>\n      <div className=\"text-sm\">\n        {errors.length > 0 &&\n          errors.map((error:any, idx:any) => {\n          return (\n            <div key={idx}>\n              <li>{Object.values(error)}</li>\n            </div>\n          );\n        })\n        }\n        <span className=\"absolute top-0 bottom-0 right-0 px-4 py-3\" onClick={() => props.hideErrors()}>\n          <svg className=\"fill-current h-6 w-6 text-red-700\" role=\"button\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\"><title>Close</title><path d=\"M14.348 14.849a1.2 1.2 0 0 1-1.697 0L10 11.819l-2.651 3.029a1.2 1.2 0 1 1-1.697-1.697l2.758-3.15-2.759-3.152a1.2 1.2 0 1 1 1.697-1.697L10 8.183l2.651-3.031a1.2 1.2 0 1 1 1.697 1.697l-2.758 3.152 2.758 3.15a1.2 1.2 0 0 1 0 1.698z\" /></svg>\n        </span>\n      </div>\n    </div>\n  )\n}\n\nexport default InvoiceError;","import React, { useState } from 'react';\nimport FormInput from './formInput';\nimport InvoiceError from './invoiceError';\n// import { isNull } from 'lodash';\nimport { calculatePrice, buildLineItem, validateLineItem } from '../utilities/formLineItem';\nimport '../styles/invoice-tailwind.css';\n\nconst FormLineItem = (props:any) => {\n  const [description, setDescription] = useState('');\n  const [cost, setCost] = useState('');\n  const [quantity, setQuantity] = useState('');\n  const [errors, setErrors] = useState<Array<any>>([]);\n\n  const handleDescriptionChange = (desc:string):void => {\n    setDescription(desc);\n  }\n\n  const handleCostChange = (cost:string):void => {\n    setCost(cost);\n  }\n\n  const handleQuantityChange = (quantity:string):void => {\n    setQuantity(quantity);\n  }\n\n  const clearInputs = ():void => {\n    setDescription('');\n    setCost('');\n    setQuantity('');\n  }\n\n  const hideErrors = ():void => {\n    setErrors([]);\n  }\n\n  const handleAddItem = ():void =>  {\n    /**\n     * validate\n     * create item object\n     * props.addToItems\n     */\n\n    const errors = validateLineItem(cost, description, quantity);\n\n    if (errors.length === 0) {\n      const price = calculatePrice(cost, quantity);\n      const newItem = buildLineItem(cost, description, price, quantity);\n      props.addToItems(newItem);\n      clearInputs();\n    } else {\n      setErrors(errors);\n    }\n  }\n\n  return (\n    <div className=\"max-flex bg-white\">\n      {errors.length > 0 &&\n        <InvoiceError errors={errors} hideErrors={hideErrors}/>\n      }\n      <div className=\"flex\">\n        <div className=\"flex-1 flex-grow text-gray-700 text-center pr-4 py-2 my-2 rounded\">\n          <FormInput\n            handleChange={handleDescriptionChange}\n            name='Description'\n            type={'string'}\n            value={description}\n          />\n        </div>\n        <div className=\"flex-initial text-gray-700 text-center pr-4 py-2 my-2 rounded\">\n          <FormInput\n            handleChange={handleCostChange}\n            name='Cost'\n            type={'number'}\n            value={cost}\n          />\n        </div>\n        <div className=\"flex-initial text-gray-700 text-center pr-4 py-2 my-2 rounded\">\n          <FormInput\n            handleChange={handleQuantityChange}\n            name='Quantity'\n            type={'number'}\n            value={quantity}\n          />\n        </div>\n        <div className=\"self-end flex-end text-gray-700 text-center bg-white mb-4\">\n          <button\n            name='add-btn'\n            className='bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded'\n            onClick={() => handleAddItem()}\n          >\n            Add Item\n          </button>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default FormLineItem;","export const calculatePrice = (cost:string, quantity:string): number => {\n    return Number(cost) * Number(quantity);\n  }\n\nexport const buildLineItem = (cost:string, description:string, price:number, quantity:string): any => {\n  return {\n      cost: Number(cost),\n      description,\n      price,\n      quantity: Number(quantity),\n  }\n}\n\nexport const validateLineItem = (cost:string, description:string, quantity:string): any[] => {\n  let errors:any[] = [];\n\n  if (!cost) {\n    errors.push({\"cost\": \"Cost is required\"});\n  }\n\n  if (!description) {\n    errors.push({\"description\": \"Description is required\"});\n  }\n\n  if (!quantity) {\n    errors.push({\"quantity\": \"Quantity is required\"});\n  }\n  \n  return errors;\n}\n","import React from 'react';\n\nconst FormSubmit = (props:any) => {\n\n  return (\n    <div className='flex flex-col items-end'>\n      <div className='my-5 text-xl'>Total: ${props.total.toFixed(2)}</div>\n      <button\n        name='submit-btn'\n        className='bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded'\n        onClick={() => props.submitInvoice()}\n      >\n        Submit Invoice\n      </button>\n    </div>\n  );\n}\n\nexport default FormSubmit;","import React from 'react';\n\nconst InvoiceAlert = (props:any) => {\n  const numberOfItems = props.items.length;\n  return (\n    <div className=\"bg-blue-100 border-t border-b border-blue-500 text-blue-700 px-4 py-3 relative\" role=\"alert\">\n      <p className=\"font-bold\">Invoice Summary</p>\n      <p className=\"text-sm\">\n        <span>You submitted an invoice with {numberOfItems} {numberOfItems === 1 ? 'item' : 'items'} and a total of ${props.total.toFixed(2)}.</span>\n        <span className=\"absolute top-0 bottom-0 right-0 px-4 py-3\" onClick={() => props.hideInvoiceSummary()}>\n          <svg className=\"fill-current h-6 w-6 text-blue-700\" role=\"button\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\"><title>Close</title><path d=\"M14.348 14.849a1.2 1.2 0 0 1-1.697 0L10 11.819l-2.651 3.029a1.2 1.2 0 1 1-1.697-1.697l2.758-3.15-2.759-3.152a1.2 1.2 0 1 1 1.697-1.697L10 8.183l2.651-3.031a1.2 1.2 0 1 1 1.697 1.697l-2.758 3.152 2.758 3.15a1.2 1.2 0 0 1 0 1.698z\" /></svg>\n        </span>\n      </p>\n    </div>\n  )\n}\n\nexport default InvoiceAlert;","import React from 'react';\nimport '../styles/invoice-tailwind.css';\n\nconst InvoiceList = (props:any) => {\n\n  return (\n    <table className=\"table-fixed w-full border-black rounded\">\n      <thead>\n        <tr className=\"text-left\">\n          <th className=\"bg-gray-400 w-1/2 px-4 py-2 border border-black\">Description</th>\n          <th className=\"bg-gray-400 w-1/6 px-4 py-2 border border-black\">Cost</th>\n          <th className=\"bg-gray-400 w-1/6 px-4 py-2 border border-black\">Quantity</th>\n          <th className=\"bg-gray-400 w-1/6 px-4 py-2 border border-black\">Price</th>\n        </tr>\n      </thead>\n      {props.lineItems.map((item: LineItem, idx: number) => {\n        return (\n          <tbody key={idx}>\n            <tr className={idx%2 === 0 ? 'bg-gray-200' : 'bg-white'}>\n              <td className=\"border px-4 py-2 border-black\">{item.description}</td>\n              <td className=\"border px-4 py-2 border-black\">${item.cost.toFixed(2)}</td>\n              <td className=\"border px-4 py-2 border-black\">{item.quantity}</td>\n              <td className=\"border px-4 py-2 border-black\">${item.price.toFixed(2)}</td>\n            </tr>\n          </tbody>\n        );\n      })}\n    </table>\n  );\n\n}\n\nexport default InvoiceList;","import React, { useEffect, useState } from 'react';\nimport FormLineItem from './formLineItem';\nimport FormSubmit from './formSubmit';\nimport InvoiceAlert from './invoiceAlert';\nimport InvoiceList from './invoiceList';\nimport '../styles/invoice-tailwind.css';\n\nconst Invoice = () => {\n  const seedInvoice = {\n    description: 'Test',\n    cost: 2.99,\n    quantity: 10,\n    price: 29.90\n  };\n  \n  const [lineItems, setLineItems] = useState<Array<LineItem>>([seedInvoice]);\n  const addToItems = (item:LineItem):void => {\n    setLineItems([...lineItems, item]);\n  }\n  \n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const getTotal = () => {\n    const totalReducer = (acc:number, value:number) => acc + value;\n    return lineItems.map(item => item.price).reduce(totalReducer);\n  }\n  \n  const [invoiceTotal, setInvoiceTotal] = useState(0);\n  useEffect(() => {\n    if (lineItems.length) {\n      setInvoiceTotal(getTotal());\n    } else {\n      setInvoiceTotal(0);\n    }\n  }, [getTotal, lineItems]);\n  \n  const [invoiceSubmitted, setInvoiceSubmitted] = useState(false);\n  const showInvoiceSummary = () => {\n    setInvoiceSubmitted(true);\n  }\n  const hideInvoiceSummary = () => {\n    setInvoiceSubmitted(false);\n    setLineItems([]);\n  }\n\n  const submitInvoice = () => {\n    const invoice = { items: lineItems, total: invoiceTotal};\n    showInvoiceSummary();\n    // clear lineItems\n    \n    console.log('Invoice: ', invoice);\n    return invoice;\n  }\n\n  return (\n    <div className='max-full bg-white rounded overflow-hidden shadow-lg px-3 py-3'>\n      {invoiceSubmitted &&\n        <InvoiceAlert items={lineItems} total={invoiceTotal} hideInvoiceSummary={hideInvoiceSummary} />\n      }\n      <FormLineItem addToItems={addToItems} />\n      <InvoiceList lineItems={lineItems} />\n      <FormSubmit total={invoiceTotal} submitInvoice={submitInvoice} />\n    </div>\n  );\n}\n\nexport default Invoice;","import React from 'react';\nimport './App.css';\nimport './styles/invoice-tailwind.css';\nimport InvoiceContainer from './components/invoiceContainer';\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App bg-gray-200\">\n      <InvoiceContainer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}